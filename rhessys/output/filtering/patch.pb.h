// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: patch.proto

#ifndef PROTOBUF_patch_2eproto__INCLUDED
#define PROTOBUF_patch_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rhessys {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_patch_2eproto();
void protobuf_AssignDesc_patch_2eproto();
void protobuf_ShutdownFile_patch_2eproto();

class OutputPatch;

// ===================================================================

class OutputPatch : public ::google::protobuf::Message {
 public:
  OutputPatch();
  virtual ~OutputPatch();

  OutputPatch(const OutputPatch& from);

  inline OutputPatch& operator=(const OutputPatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OutputPatch& default_instance();

  void Swap(OutputPatch* other);

  // implements Message ----------------------------------------------

  OutputPatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OutputPatch& from);
  void MergeFrom(const OutputPatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 day = 1;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 1;
  inline ::google::protobuf::int64 day() const;
  inline void set_day(::google::protobuf::int64 value);

  // required int64 month = 2;
  inline bool has_month() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 2;
  inline ::google::protobuf::int64 month() const;
  inline void set_month(::google::protobuf::int64 value);

  // required int64 year = 3;
  inline bool has_year() const;
  inline void clear_year();
  static const int kYearFieldNumber = 3;
  inline ::google::protobuf::int64 year() const;
  inline void set_year(::google::protobuf::int64 value);

  // required int32 basin_id = 4;
  inline bool has_basin_id() const;
  inline void clear_basin_id();
  static const int kBasinIdFieldNumber = 4;
  inline ::google::protobuf::int32 basin_id() const;
  inline void set_basin_id(::google::protobuf::int32 value);

  // required int32 hill_id = 5;
  inline bool has_hill_id() const;
  inline void clear_hill_id();
  static const int kHillIdFieldNumber = 5;
  inline ::google::protobuf::int32 hill_id() const;
  inline void set_hill_id(::google::protobuf::int32 value);

  // required int32 zone_id = 6;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 6;
  inline ::google::protobuf::int32 zone_id() const;
  inline void set_zone_id(::google::protobuf::int32 value);

  // required int32 patch_id = 7;
  inline bool has_patch_id() const;
  inline void clear_patch_id();
  static const int kPatchIdFieldNumber = 7;
  inline ::google::protobuf::int32 patch_id() const;
  inline void set_patch_id(::google::protobuf::int32 value);

  // required double rain_throughfall = 8;
  inline bool has_rain_throughfall() const;
  inline void clear_rain_throughfall();
  static const int kRainThroughfallFieldNumber = 8;
  inline double rain_throughfall() const;
  inline void set_rain_throughfall(double value);

  // required double detention_store = 9;
  inline bool has_detention_store() const;
  inline void clear_detention_store();
  static const int kDetentionStoreFieldNumber = 9;
  inline double detention_store() const;
  inline void set_detention_store(double value);

  // required double sat_deficit_z = 10;
  inline bool has_sat_deficit_z() const;
  inline void clear_sat_deficit_z();
  static const int kSatDeficitZFieldNumber = 10;
  inline double sat_deficit_z() const;
  inline void set_sat_deficit_z(double value);

  // required double sat_deficit = 11;
  inline bool has_sat_deficit() const;
  inline void clear_sat_deficit();
  static const int kSatDeficitFieldNumber = 11;
  inline double sat_deficit() const;
  inline void set_sat_deficit(double value);

  // required double rz_storage = 12;
  inline bool has_rz_storage() const;
  inline void clear_rz_storage();
  static const int kRzStorageFieldNumber = 12;
  inline double rz_storage() const;
  inline void set_rz_storage(double value);

  // required double potential_sat = 13;
  inline bool has_potential_sat() const;
  inline void clear_potential_sat();
  static const int kPotentialSatFieldNumber = 13;
  inline double potential_sat() const;
  inline void set_potential_sat(double value);

  // required double field_capacity = 14;
  inline bool has_field_capacity() const;
  inline void clear_field_capacity();
  static const int kFieldCapacityFieldNumber = 14;
  inline double field_capacity() const;
  inline void set_field_capacity(double value);

  // required double wilting_point = 15;
  inline bool has_wilting_point() const;
  inline void clear_wilting_point();
  static const int kWiltingPointFieldNumber = 15;
  inline double wilting_point() const;
  inline void set_wilting_point(double value);

  // required double unsat_storage = 16;
  inline bool has_unsat_storage() const;
  inline void clear_unsat_storage();
  static const int kUnsatStorageFieldNumber = 16;
  inline double unsat_storage() const;
  inline void set_unsat_storage(double value);

  // required double rz_drainage = 17;
  inline bool has_rz_drainage() const;
  inline void clear_rz_drainage();
  static const int kRzDrainageFieldNumber = 17;
  inline double rz_drainage() const;
  inline void set_rz_drainage(double value);

  // required double unsat_drainage = 18;
  inline bool has_unsat_drainage() const;
  inline void clear_unsat_drainage();
  static const int kUnsatDrainageFieldNumber = 18;
  inline double unsat_drainage() const;
  inline void set_unsat_drainage(double value);

  // required double sublimation = 19;
  inline bool has_sublimation() const;
  inline void clear_sublimation();
  static const int kSublimationFieldNumber = 19;
  inline double sublimation() const;
  inline void set_sublimation(double value);

  // required double return_flow = 20;
  inline bool has_return_flow() const;
  inline void clear_return_flow();
  static const int kReturnFlowFieldNumber = 20;
  inline double return_flow() const;
  inline void set_return_flow(double value);

  // required double evaporation = 21;
  inline bool has_evaporation() const;
  inline void clear_evaporation();
  static const int kEvaporationFieldNumber = 21;
  inline double evaporation() const;
  inline void set_evaporation(double value);

  // required double evaporation_surf = 22;
  inline bool has_evaporation_surf() const;
  inline void clear_evaporation_surf();
  static const int kEvaporationSurfFieldNumber = 22;
  inline double evaporation_surf() const;
  inline void set_evaporation_surf(double value);

  // required double soil_evap = 23;
  inline bool has_soil_evap() const;
  inline void clear_soil_evap();
  static const int kSoilEvapFieldNumber = 23;
  inline double soil_evap() const;
  inline void set_soil_evap(double value);

  // required double snow = 24;
  inline bool has_snow() const;
  inline void clear_snow();
  static const int kSnowFieldNumber = 24;
  inline double snow() const;
  inline void set_snow(double value);

  // required double snow_melt = 25;
  inline bool has_snow_melt() const;
  inline void clear_snow_melt();
  static const int kSnowMeltFieldNumber = 25;
  inline double snow_melt() const;
  inline void set_snow_melt(double value);

  // required double trans_sat = 26;
  inline bool has_trans_sat() const;
  inline void clear_trans_sat();
  static const int kTransSatFieldNumber = 26;
  inline double trans_sat() const;
  inline void set_trans_sat(double value);

  // required double trans_unsat = 27;
  inline bool has_trans_unsat() const;
  inline void clear_trans_unsat();
  static const int kTransUnsatFieldNumber = 27;
  inline double trans_unsat() const;
  inline void set_trans_unsat(double value);

  // required double q_in = 28;
  inline bool has_q_in() const;
  inline void clear_q_in();
  static const int kQInFieldNumber = 28;
  inline double q_in() const;
  inline void set_q_in(double value);

  // required double q_out = 29;
  inline bool has_q_out() const;
  inline void clear_q_out();
  static const int kQOutFieldNumber = 29;
  inline double q_out() const;
  inline void set_q_out(double value);

  // required double psn = 30;
  inline bool has_psn() const;
  inline void clear_psn();
  static const int kPsnFieldNumber = 30;
  inline double psn() const;
  inline void set_psn(double value);

  // required double rootzone_s = 31;
  inline bool has_rootzone_s() const;
  inline void clear_rootzone_s();
  static const int kRootzoneSFieldNumber = 31;
  inline double rootzone_s() const;
  inline void set_rootzone_s(double value);

  // required double rootzone_depth = 32;
  inline bool has_rootzone_depth() const;
  inline void clear_rootzone_depth();
  static const int kRootzoneDepthFieldNumber = 32;
  inline double rootzone_depth() const;
  inline void set_rootzone_depth(double value);

  // required double litter_rain_stored = 33;
  inline bool has_litter_rain_stored() const;
  inline void clear_litter_rain_stored();
  static const int kLitterRainStoredFieldNumber = 33;
  inline double litter_rain_stored() const;
  inline void set_litter_rain_stored(double value);

  // required double litter_s = 34;
  inline bool has_litter_s() const;
  inline void clear_litter_s();
  static const int kLitterSFieldNumber = 34;
  inline double litter_s() const;
  inline void set_litter_s(double value);

  // required double area = 35;
  inline bool has_area() const;
  inline void clear_area();
  static const int kAreaFieldNumber = 35;
  inline double area() const;
  inline void set_area(double value);

  // required double pet = 36;
  inline bool has_pet() const;
  inline void clear_pet();
  static const int kPetFieldNumber = 36;
  inline double pet() const;
  inline void set_pet(double value);

  // required double lai = 37;
  inline bool has_lai() const;
  inline void clear_lai();
  static const int kLaiFieldNumber = 37;
  inline double lai() const;
  inline void set_lai(double value);

  // required double baseflow = 38;
  inline bool has_baseflow() const;
  inline void clear_baseflow();
  static const int kBaseflowFieldNumber = 38;
  inline double baseflow() const;
  inline void set_baseflow(double value);

  // required double streamflow = 39;
  inline bool has_streamflow() const;
  inline void clear_streamflow();
  static const int kStreamflowFieldNumber = 39;
  inline double streamflow() const;
  inline void set_streamflow(double value);

  // required double precip = 40;
  inline bool has_precip() const;
  inline void clear_precip();
  static const int kPrecipFieldNumber = 40;
  inline double precip() const;
  inline void set_precip(double value);

  // required double recharge = 41;
  inline bool has_recharge() const;
  inline void clear_recharge();
  static const int kRechargeFieldNumber = 41;
  inline double recharge() const;
  inline void set_recharge(double value);

  // @@protoc_insertion_point(class_scope:rhessys.OutputPatch)
 private:
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_month();
  inline void clear_has_month();
  inline void set_has_year();
  inline void clear_has_year();
  inline void set_has_basin_id();
  inline void clear_has_basin_id();
  inline void set_has_hill_id();
  inline void clear_has_hill_id();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_patch_id();
  inline void clear_has_patch_id();
  inline void set_has_rain_throughfall();
  inline void clear_has_rain_throughfall();
  inline void set_has_detention_store();
  inline void clear_has_detention_store();
  inline void set_has_sat_deficit_z();
  inline void clear_has_sat_deficit_z();
  inline void set_has_sat_deficit();
  inline void clear_has_sat_deficit();
  inline void set_has_rz_storage();
  inline void clear_has_rz_storage();
  inline void set_has_potential_sat();
  inline void clear_has_potential_sat();
  inline void set_has_field_capacity();
  inline void clear_has_field_capacity();
  inline void set_has_wilting_point();
  inline void clear_has_wilting_point();
  inline void set_has_unsat_storage();
  inline void clear_has_unsat_storage();
  inline void set_has_rz_drainage();
  inline void clear_has_rz_drainage();
  inline void set_has_unsat_drainage();
  inline void clear_has_unsat_drainage();
  inline void set_has_sublimation();
  inline void clear_has_sublimation();
  inline void set_has_return_flow();
  inline void clear_has_return_flow();
  inline void set_has_evaporation();
  inline void clear_has_evaporation();
  inline void set_has_evaporation_surf();
  inline void clear_has_evaporation_surf();
  inline void set_has_soil_evap();
  inline void clear_has_soil_evap();
  inline void set_has_snow();
  inline void clear_has_snow();
  inline void set_has_snow_melt();
  inline void clear_has_snow_melt();
  inline void set_has_trans_sat();
  inline void clear_has_trans_sat();
  inline void set_has_trans_unsat();
  inline void clear_has_trans_unsat();
  inline void set_has_q_in();
  inline void clear_has_q_in();
  inline void set_has_q_out();
  inline void clear_has_q_out();
  inline void set_has_psn();
  inline void clear_has_psn();
  inline void set_has_rootzone_s();
  inline void clear_has_rootzone_s();
  inline void set_has_rootzone_depth();
  inline void clear_has_rootzone_depth();
  inline void set_has_litter_rain_stored();
  inline void clear_has_litter_rain_stored();
  inline void set_has_litter_s();
  inline void clear_has_litter_s();
  inline void set_has_area();
  inline void clear_has_area();
  inline void set_has_pet();
  inline void clear_has_pet();
  inline void set_has_lai();
  inline void clear_has_lai();
  inline void set_has_baseflow();
  inline void clear_has_baseflow();
  inline void set_has_streamflow();
  inline void clear_has_streamflow();
  inline void set_has_precip();
  inline void clear_has_precip();
  inline void set_has_recharge();
  inline void clear_has_recharge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::int64 day_;
  ::google::protobuf::int64 month_;
  ::google::protobuf::int64 year_;
  ::google::protobuf::int32 basin_id_;
  ::google::protobuf::int32 hill_id_;
  ::google::protobuf::int32 zone_id_;
  ::google::protobuf::int32 patch_id_;
  double rain_throughfall_;
  double detention_store_;
  double sat_deficit_z_;
  double sat_deficit_;
  double rz_storage_;
  double potential_sat_;
  double field_capacity_;
  double wilting_point_;
  double unsat_storage_;
  double rz_drainage_;
  double unsat_drainage_;
  double sublimation_;
  double return_flow_;
  double evaporation_;
  double evaporation_surf_;
  double soil_evap_;
  double snow_;
  double snow_melt_;
  double trans_sat_;
  double trans_unsat_;
  double q_in_;
  double q_out_;
  double psn_;
  double rootzone_s_;
  double rootzone_depth_;
  double litter_rain_stored_;
  double litter_s_;
  double area_;
  double pet_;
  double lai_;
  double baseflow_;
  double streamflow_;
  double precip_;
  double recharge_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_patch_2eproto();
  friend void protobuf_AssignDesc_patch_2eproto();
  friend void protobuf_ShutdownFile_patch_2eproto();

  void InitAsDefaultInstance();
  static OutputPatch* default_instance_;
};
// ===================================================================


// ===================================================================

// OutputPatch

// required int64 day = 1;
inline bool OutputPatch::has_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OutputPatch::set_has_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OutputPatch::clear_has_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OutputPatch::clear_day() {
  day_ = GOOGLE_LONGLONG(0);
  clear_has_day();
}
inline ::google::protobuf::int64 OutputPatch::day() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.day)
  return day_;
}
inline void OutputPatch::set_day(::google::protobuf::int64 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.day)
}

// required int64 month = 2;
inline bool OutputPatch::has_month() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OutputPatch::set_has_month() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OutputPatch::clear_has_month() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OutputPatch::clear_month() {
  month_ = GOOGLE_LONGLONG(0);
  clear_has_month();
}
inline ::google::protobuf::int64 OutputPatch::month() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.month)
  return month_;
}
inline void OutputPatch::set_month(::google::protobuf::int64 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.month)
}

// required int64 year = 3;
inline bool OutputPatch::has_year() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OutputPatch::set_has_year() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OutputPatch::clear_has_year() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OutputPatch::clear_year() {
  year_ = GOOGLE_LONGLONG(0);
  clear_has_year();
}
inline ::google::protobuf::int64 OutputPatch::year() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.year)
  return year_;
}
inline void OutputPatch::set_year(::google::protobuf::int64 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.year)
}

// required int32 basin_id = 4;
inline bool OutputPatch::has_basin_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OutputPatch::set_has_basin_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OutputPatch::clear_has_basin_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OutputPatch::clear_basin_id() {
  basin_id_ = 0;
  clear_has_basin_id();
}
inline ::google::protobuf::int32 OutputPatch::basin_id() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.basin_id)
  return basin_id_;
}
inline void OutputPatch::set_basin_id(::google::protobuf::int32 value) {
  set_has_basin_id();
  basin_id_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.basin_id)
}

// required int32 hill_id = 5;
inline bool OutputPatch::has_hill_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OutputPatch::set_has_hill_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OutputPatch::clear_has_hill_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OutputPatch::clear_hill_id() {
  hill_id_ = 0;
  clear_has_hill_id();
}
inline ::google::protobuf::int32 OutputPatch::hill_id() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.hill_id)
  return hill_id_;
}
inline void OutputPatch::set_hill_id(::google::protobuf::int32 value) {
  set_has_hill_id();
  hill_id_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.hill_id)
}

// required int32 zone_id = 6;
inline bool OutputPatch::has_zone_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OutputPatch::set_has_zone_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OutputPatch::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OutputPatch::clear_zone_id() {
  zone_id_ = 0;
  clear_has_zone_id();
}
inline ::google::protobuf::int32 OutputPatch::zone_id() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.zone_id)
  return zone_id_;
}
inline void OutputPatch::set_zone_id(::google::protobuf::int32 value) {
  set_has_zone_id();
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.zone_id)
}

// required int32 patch_id = 7;
inline bool OutputPatch::has_patch_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OutputPatch::set_has_patch_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OutputPatch::clear_has_patch_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OutputPatch::clear_patch_id() {
  patch_id_ = 0;
  clear_has_patch_id();
}
inline ::google::protobuf::int32 OutputPatch::patch_id() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.patch_id)
  return patch_id_;
}
inline void OutputPatch::set_patch_id(::google::protobuf::int32 value) {
  set_has_patch_id();
  patch_id_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.patch_id)
}

// required double rain_throughfall = 8;
inline bool OutputPatch::has_rain_throughfall() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OutputPatch::set_has_rain_throughfall() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OutputPatch::clear_has_rain_throughfall() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OutputPatch::clear_rain_throughfall() {
  rain_throughfall_ = 0;
  clear_has_rain_throughfall();
}
inline double OutputPatch::rain_throughfall() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.rain_throughfall)
  return rain_throughfall_;
}
inline void OutputPatch::set_rain_throughfall(double value) {
  set_has_rain_throughfall();
  rain_throughfall_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.rain_throughfall)
}

// required double detention_store = 9;
inline bool OutputPatch::has_detention_store() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OutputPatch::set_has_detention_store() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OutputPatch::clear_has_detention_store() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OutputPatch::clear_detention_store() {
  detention_store_ = 0;
  clear_has_detention_store();
}
inline double OutputPatch::detention_store() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.detention_store)
  return detention_store_;
}
inline void OutputPatch::set_detention_store(double value) {
  set_has_detention_store();
  detention_store_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.detention_store)
}

// required double sat_deficit_z = 10;
inline bool OutputPatch::has_sat_deficit_z() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OutputPatch::set_has_sat_deficit_z() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OutputPatch::clear_has_sat_deficit_z() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OutputPatch::clear_sat_deficit_z() {
  sat_deficit_z_ = 0;
  clear_has_sat_deficit_z();
}
inline double OutputPatch::sat_deficit_z() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.sat_deficit_z)
  return sat_deficit_z_;
}
inline void OutputPatch::set_sat_deficit_z(double value) {
  set_has_sat_deficit_z();
  sat_deficit_z_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.sat_deficit_z)
}

// required double sat_deficit = 11;
inline bool OutputPatch::has_sat_deficit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OutputPatch::set_has_sat_deficit() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OutputPatch::clear_has_sat_deficit() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OutputPatch::clear_sat_deficit() {
  sat_deficit_ = 0;
  clear_has_sat_deficit();
}
inline double OutputPatch::sat_deficit() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.sat_deficit)
  return sat_deficit_;
}
inline void OutputPatch::set_sat_deficit(double value) {
  set_has_sat_deficit();
  sat_deficit_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.sat_deficit)
}

// required double rz_storage = 12;
inline bool OutputPatch::has_rz_storage() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OutputPatch::set_has_rz_storage() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OutputPatch::clear_has_rz_storage() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OutputPatch::clear_rz_storage() {
  rz_storage_ = 0;
  clear_has_rz_storage();
}
inline double OutputPatch::rz_storage() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.rz_storage)
  return rz_storage_;
}
inline void OutputPatch::set_rz_storage(double value) {
  set_has_rz_storage();
  rz_storage_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.rz_storage)
}

// required double potential_sat = 13;
inline bool OutputPatch::has_potential_sat() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OutputPatch::set_has_potential_sat() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OutputPatch::clear_has_potential_sat() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OutputPatch::clear_potential_sat() {
  potential_sat_ = 0;
  clear_has_potential_sat();
}
inline double OutputPatch::potential_sat() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.potential_sat)
  return potential_sat_;
}
inline void OutputPatch::set_potential_sat(double value) {
  set_has_potential_sat();
  potential_sat_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.potential_sat)
}

// required double field_capacity = 14;
inline bool OutputPatch::has_field_capacity() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OutputPatch::set_has_field_capacity() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OutputPatch::clear_has_field_capacity() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OutputPatch::clear_field_capacity() {
  field_capacity_ = 0;
  clear_has_field_capacity();
}
inline double OutputPatch::field_capacity() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.field_capacity)
  return field_capacity_;
}
inline void OutputPatch::set_field_capacity(double value) {
  set_has_field_capacity();
  field_capacity_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.field_capacity)
}

// required double wilting_point = 15;
inline bool OutputPatch::has_wilting_point() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OutputPatch::set_has_wilting_point() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OutputPatch::clear_has_wilting_point() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OutputPatch::clear_wilting_point() {
  wilting_point_ = 0;
  clear_has_wilting_point();
}
inline double OutputPatch::wilting_point() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.wilting_point)
  return wilting_point_;
}
inline void OutputPatch::set_wilting_point(double value) {
  set_has_wilting_point();
  wilting_point_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.wilting_point)
}

// required double unsat_storage = 16;
inline bool OutputPatch::has_unsat_storage() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OutputPatch::set_has_unsat_storage() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OutputPatch::clear_has_unsat_storage() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OutputPatch::clear_unsat_storage() {
  unsat_storage_ = 0;
  clear_has_unsat_storage();
}
inline double OutputPatch::unsat_storage() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.unsat_storage)
  return unsat_storage_;
}
inline void OutputPatch::set_unsat_storage(double value) {
  set_has_unsat_storage();
  unsat_storage_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.unsat_storage)
}

// required double rz_drainage = 17;
inline bool OutputPatch::has_rz_drainage() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OutputPatch::set_has_rz_drainage() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OutputPatch::clear_has_rz_drainage() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OutputPatch::clear_rz_drainage() {
  rz_drainage_ = 0;
  clear_has_rz_drainage();
}
inline double OutputPatch::rz_drainage() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.rz_drainage)
  return rz_drainage_;
}
inline void OutputPatch::set_rz_drainage(double value) {
  set_has_rz_drainage();
  rz_drainage_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.rz_drainage)
}

// required double unsat_drainage = 18;
inline bool OutputPatch::has_unsat_drainage() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void OutputPatch::set_has_unsat_drainage() {
  _has_bits_[0] |= 0x00020000u;
}
inline void OutputPatch::clear_has_unsat_drainage() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void OutputPatch::clear_unsat_drainage() {
  unsat_drainage_ = 0;
  clear_has_unsat_drainage();
}
inline double OutputPatch::unsat_drainage() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.unsat_drainage)
  return unsat_drainage_;
}
inline void OutputPatch::set_unsat_drainage(double value) {
  set_has_unsat_drainage();
  unsat_drainage_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.unsat_drainage)
}

// required double sublimation = 19;
inline bool OutputPatch::has_sublimation() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void OutputPatch::set_has_sublimation() {
  _has_bits_[0] |= 0x00040000u;
}
inline void OutputPatch::clear_has_sublimation() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void OutputPatch::clear_sublimation() {
  sublimation_ = 0;
  clear_has_sublimation();
}
inline double OutputPatch::sublimation() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.sublimation)
  return sublimation_;
}
inline void OutputPatch::set_sublimation(double value) {
  set_has_sublimation();
  sublimation_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.sublimation)
}

// required double return_flow = 20;
inline bool OutputPatch::has_return_flow() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void OutputPatch::set_has_return_flow() {
  _has_bits_[0] |= 0x00080000u;
}
inline void OutputPatch::clear_has_return_flow() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void OutputPatch::clear_return_flow() {
  return_flow_ = 0;
  clear_has_return_flow();
}
inline double OutputPatch::return_flow() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.return_flow)
  return return_flow_;
}
inline void OutputPatch::set_return_flow(double value) {
  set_has_return_flow();
  return_flow_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.return_flow)
}

// required double evaporation = 21;
inline bool OutputPatch::has_evaporation() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void OutputPatch::set_has_evaporation() {
  _has_bits_[0] |= 0x00100000u;
}
inline void OutputPatch::clear_has_evaporation() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void OutputPatch::clear_evaporation() {
  evaporation_ = 0;
  clear_has_evaporation();
}
inline double OutputPatch::evaporation() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.evaporation)
  return evaporation_;
}
inline void OutputPatch::set_evaporation(double value) {
  set_has_evaporation();
  evaporation_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.evaporation)
}

// required double evaporation_surf = 22;
inline bool OutputPatch::has_evaporation_surf() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void OutputPatch::set_has_evaporation_surf() {
  _has_bits_[0] |= 0x00200000u;
}
inline void OutputPatch::clear_has_evaporation_surf() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void OutputPatch::clear_evaporation_surf() {
  evaporation_surf_ = 0;
  clear_has_evaporation_surf();
}
inline double OutputPatch::evaporation_surf() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.evaporation_surf)
  return evaporation_surf_;
}
inline void OutputPatch::set_evaporation_surf(double value) {
  set_has_evaporation_surf();
  evaporation_surf_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.evaporation_surf)
}

// required double soil_evap = 23;
inline bool OutputPatch::has_soil_evap() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void OutputPatch::set_has_soil_evap() {
  _has_bits_[0] |= 0x00400000u;
}
inline void OutputPatch::clear_has_soil_evap() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void OutputPatch::clear_soil_evap() {
  soil_evap_ = 0;
  clear_has_soil_evap();
}
inline double OutputPatch::soil_evap() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.soil_evap)
  return soil_evap_;
}
inline void OutputPatch::set_soil_evap(double value) {
  set_has_soil_evap();
  soil_evap_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.soil_evap)
}

// required double snow = 24;
inline bool OutputPatch::has_snow() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void OutputPatch::set_has_snow() {
  _has_bits_[0] |= 0x00800000u;
}
inline void OutputPatch::clear_has_snow() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void OutputPatch::clear_snow() {
  snow_ = 0;
  clear_has_snow();
}
inline double OutputPatch::snow() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.snow)
  return snow_;
}
inline void OutputPatch::set_snow(double value) {
  set_has_snow();
  snow_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.snow)
}

// required double snow_melt = 25;
inline bool OutputPatch::has_snow_melt() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void OutputPatch::set_has_snow_melt() {
  _has_bits_[0] |= 0x01000000u;
}
inline void OutputPatch::clear_has_snow_melt() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void OutputPatch::clear_snow_melt() {
  snow_melt_ = 0;
  clear_has_snow_melt();
}
inline double OutputPatch::snow_melt() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.snow_melt)
  return snow_melt_;
}
inline void OutputPatch::set_snow_melt(double value) {
  set_has_snow_melt();
  snow_melt_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.snow_melt)
}

// required double trans_sat = 26;
inline bool OutputPatch::has_trans_sat() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void OutputPatch::set_has_trans_sat() {
  _has_bits_[0] |= 0x02000000u;
}
inline void OutputPatch::clear_has_trans_sat() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void OutputPatch::clear_trans_sat() {
  trans_sat_ = 0;
  clear_has_trans_sat();
}
inline double OutputPatch::trans_sat() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.trans_sat)
  return trans_sat_;
}
inline void OutputPatch::set_trans_sat(double value) {
  set_has_trans_sat();
  trans_sat_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.trans_sat)
}

// required double trans_unsat = 27;
inline bool OutputPatch::has_trans_unsat() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void OutputPatch::set_has_trans_unsat() {
  _has_bits_[0] |= 0x04000000u;
}
inline void OutputPatch::clear_has_trans_unsat() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void OutputPatch::clear_trans_unsat() {
  trans_unsat_ = 0;
  clear_has_trans_unsat();
}
inline double OutputPatch::trans_unsat() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.trans_unsat)
  return trans_unsat_;
}
inline void OutputPatch::set_trans_unsat(double value) {
  set_has_trans_unsat();
  trans_unsat_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.trans_unsat)
}

// required double q_in = 28;
inline bool OutputPatch::has_q_in() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void OutputPatch::set_has_q_in() {
  _has_bits_[0] |= 0x08000000u;
}
inline void OutputPatch::clear_has_q_in() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void OutputPatch::clear_q_in() {
  q_in_ = 0;
  clear_has_q_in();
}
inline double OutputPatch::q_in() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.q_in)
  return q_in_;
}
inline void OutputPatch::set_q_in(double value) {
  set_has_q_in();
  q_in_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.q_in)
}

// required double q_out = 29;
inline bool OutputPatch::has_q_out() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void OutputPatch::set_has_q_out() {
  _has_bits_[0] |= 0x10000000u;
}
inline void OutputPatch::clear_has_q_out() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void OutputPatch::clear_q_out() {
  q_out_ = 0;
  clear_has_q_out();
}
inline double OutputPatch::q_out() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.q_out)
  return q_out_;
}
inline void OutputPatch::set_q_out(double value) {
  set_has_q_out();
  q_out_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.q_out)
}

// required double psn = 30;
inline bool OutputPatch::has_psn() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void OutputPatch::set_has_psn() {
  _has_bits_[0] |= 0x20000000u;
}
inline void OutputPatch::clear_has_psn() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void OutputPatch::clear_psn() {
  psn_ = 0;
  clear_has_psn();
}
inline double OutputPatch::psn() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.psn)
  return psn_;
}
inline void OutputPatch::set_psn(double value) {
  set_has_psn();
  psn_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.psn)
}

// required double rootzone_s = 31;
inline bool OutputPatch::has_rootzone_s() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void OutputPatch::set_has_rootzone_s() {
  _has_bits_[0] |= 0x40000000u;
}
inline void OutputPatch::clear_has_rootzone_s() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void OutputPatch::clear_rootzone_s() {
  rootzone_s_ = 0;
  clear_has_rootzone_s();
}
inline double OutputPatch::rootzone_s() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.rootzone_s)
  return rootzone_s_;
}
inline void OutputPatch::set_rootzone_s(double value) {
  set_has_rootzone_s();
  rootzone_s_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.rootzone_s)
}

// required double rootzone_depth = 32;
inline bool OutputPatch::has_rootzone_depth() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void OutputPatch::set_has_rootzone_depth() {
  _has_bits_[0] |= 0x80000000u;
}
inline void OutputPatch::clear_has_rootzone_depth() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void OutputPatch::clear_rootzone_depth() {
  rootzone_depth_ = 0;
  clear_has_rootzone_depth();
}
inline double OutputPatch::rootzone_depth() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.rootzone_depth)
  return rootzone_depth_;
}
inline void OutputPatch::set_rootzone_depth(double value) {
  set_has_rootzone_depth();
  rootzone_depth_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.rootzone_depth)
}

// required double litter_rain_stored = 33;
inline bool OutputPatch::has_litter_rain_stored() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void OutputPatch::set_has_litter_rain_stored() {
  _has_bits_[1] |= 0x00000001u;
}
inline void OutputPatch::clear_has_litter_rain_stored() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void OutputPatch::clear_litter_rain_stored() {
  litter_rain_stored_ = 0;
  clear_has_litter_rain_stored();
}
inline double OutputPatch::litter_rain_stored() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.litter_rain_stored)
  return litter_rain_stored_;
}
inline void OutputPatch::set_litter_rain_stored(double value) {
  set_has_litter_rain_stored();
  litter_rain_stored_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.litter_rain_stored)
}

// required double litter_s = 34;
inline bool OutputPatch::has_litter_s() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void OutputPatch::set_has_litter_s() {
  _has_bits_[1] |= 0x00000002u;
}
inline void OutputPatch::clear_has_litter_s() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void OutputPatch::clear_litter_s() {
  litter_s_ = 0;
  clear_has_litter_s();
}
inline double OutputPatch::litter_s() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.litter_s)
  return litter_s_;
}
inline void OutputPatch::set_litter_s(double value) {
  set_has_litter_s();
  litter_s_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.litter_s)
}

// required double area = 35;
inline bool OutputPatch::has_area() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void OutputPatch::set_has_area() {
  _has_bits_[1] |= 0x00000004u;
}
inline void OutputPatch::clear_has_area() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void OutputPatch::clear_area() {
  area_ = 0;
  clear_has_area();
}
inline double OutputPatch::area() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.area)
  return area_;
}
inline void OutputPatch::set_area(double value) {
  set_has_area();
  area_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.area)
}

// required double pet = 36;
inline bool OutputPatch::has_pet() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void OutputPatch::set_has_pet() {
  _has_bits_[1] |= 0x00000008u;
}
inline void OutputPatch::clear_has_pet() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void OutputPatch::clear_pet() {
  pet_ = 0;
  clear_has_pet();
}
inline double OutputPatch::pet() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.pet)
  return pet_;
}
inline void OutputPatch::set_pet(double value) {
  set_has_pet();
  pet_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.pet)
}

// required double lai = 37;
inline bool OutputPatch::has_lai() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void OutputPatch::set_has_lai() {
  _has_bits_[1] |= 0x00000010u;
}
inline void OutputPatch::clear_has_lai() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void OutputPatch::clear_lai() {
  lai_ = 0;
  clear_has_lai();
}
inline double OutputPatch::lai() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.lai)
  return lai_;
}
inline void OutputPatch::set_lai(double value) {
  set_has_lai();
  lai_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.lai)
}

// required double baseflow = 38;
inline bool OutputPatch::has_baseflow() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void OutputPatch::set_has_baseflow() {
  _has_bits_[1] |= 0x00000020u;
}
inline void OutputPatch::clear_has_baseflow() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void OutputPatch::clear_baseflow() {
  baseflow_ = 0;
  clear_has_baseflow();
}
inline double OutputPatch::baseflow() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.baseflow)
  return baseflow_;
}
inline void OutputPatch::set_baseflow(double value) {
  set_has_baseflow();
  baseflow_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.baseflow)
}

// required double streamflow = 39;
inline bool OutputPatch::has_streamflow() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void OutputPatch::set_has_streamflow() {
  _has_bits_[1] |= 0x00000040u;
}
inline void OutputPatch::clear_has_streamflow() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void OutputPatch::clear_streamflow() {
  streamflow_ = 0;
  clear_has_streamflow();
}
inline double OutputPatch::streamflow() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.streamflow)
  return streamflow_;
}
inline void OutputPatch::set_streamflow(double value) {
  set_has_streamflow();
  streamflow_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.streamflow)
}

// required double precip = 40;
inline bool OutputPatch::has_precip() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void OutputPatch::set_has_precip() {
  _has_bits_[1] |= 0x00000080u;
}
inline void OutputPatch::clear_has_precip() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void OutputPatch::clear_precip() {
  precip_ = 0;
  clear_has_precip();
}
inline double OutputPatch::precip() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.precip)
  return precip_;
}
inline void OutputPatch::set_precip(double value) {
  set_has_precip();
  precip_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.precip)
}

// required double recharge = 41;
inline bool OutputPatch::has_recharge() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void OutputPatch::set_has_recharge() {
  _has_bits_[1] |= 0x00000100u;
}
inline void OutputPatch::clear_has_recharge() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void OutputPatch::clear_recharge() {
  recharge_ = 0;
  clear_has_recharge();
}
inline double OutputPatch::recharge() const {
  // @@protoc_insertion_point(field_get:rhessys.OutputPatch.recharge)
  return recharge_;
}
inline void OutputPatch::set_recharge(double value) {
  set_has_recharge();
  recharge_ = value;
  // @@protoc_insertion_point(field_set:rhessys.OutputPatch.recharge)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rhessys

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_patch_2eproto__INCLUDED
