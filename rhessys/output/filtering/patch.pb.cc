// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: patch.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "patch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rhessys {

namespace {

const ::google::protobuf::Descriptor* OutputPatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OutputPatch_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_patch_2eproto() {
  protobuf_AddDesc_patch_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "patch.proto");
  GOOGLE_CHECK(file != NULL);
  OutputPatch_descriptor_ = file->message_type(0);
  static const int OutputPatch_offsets_[41] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, basin_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, hill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, patch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, rain_throughfall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, detention_store_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, sat_deficit_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, sat_deficit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, rz_storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, potential_sat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, field_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, wilting_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, unsat_storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, rz_drainage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, unsat_drainage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, sublimation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, return_flow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, evaporation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, evaporation_surf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, soil_evap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, snow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, snow_melt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, trans_sat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, trans_unsat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, q_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, q_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, psn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, rootzone_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, rootzone_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, litter_rain_stored_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, litter_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, lai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, baseflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, streamflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, precip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, recharge_),
  };
  OutputPatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OutputPatch_descriptor_,
      OutputPatch::default_instance_,
      OutputPatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputPatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OutputPatch));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_patch_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OutputPatch_descriptor_, &OutputPatch::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_patch_2eproto() {
  delete OutputPatch::default_instance_;
  delete OutputPatch_reflection_;
}

void protobuf_AddDesc_patch_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013patch.proto\022\007rhessys\"\243\006\n\013OutputPatch\022\013"
    "\n\003day\030\001 \002(\003\022\r\n\005month\030\002 \002(\003\022\014\n\004year\030\003 \002(\003"
    "\022\020\n\010basin_id\030\004 \002(\005\022\017\n\007hill_id\030\005 \002(\005\022\017\n\007z"
    "one_id\030\006 \002(\005\022\020\n\010patch_id\030\007 \002(\005\022\030\n\020rain_t"
    "hroughfall\030\010 \002(\001\022\027\n\017detention_store\030\t \002("
    "\001\022\025\n\rsat_deficit_z\030\n \002(\001\022\023\n\013sat_deficit\030"
    "\013 \002(\001\022\022\n\nrz_storage\030\014 \002(\001\022\025\n\rpotential_s"
    "at\030\r \002(\001\022\026\n\016field_capacity\030\016 \002(\001\022\025\n\rwilt"
    "ing_point\030\017 \002(\001\022\025\n\runsat_storage\030\020 \002(\001\022\023"
    "\n\013rz_drainage\030\021 \002(\001\022\026\n\016unsat_drainage\030\022 "
    "\002(\001\022\023\n\013sublimation\030\023 \002(\001\022\023\n\013return_flow\030"
    "\024 \002(\001\022\023\n\013evaporation\030\025 \002(\001\022\030\n\020evaporatio"
    "n_surf\030\026 \002(\001\022\021\n\tsoil_evap\030\027 \002(\001\022\014\n\004snow\030"
    "\030 \002(\001\022\021\n\tsnow_melt\030\031 \002(\001\022\021\n\ttrans_sat\030\032 "
    "\002(\001\022\023\n\013trans_unsat\030\033 \002(\001\022\014\n\004q_in\030\034 \002(\001\022\r"
    "\n\005q_out\030\035 \002(\001\022\013\n\003psn\030\036 \002(\001\022\022\n\nrootzone_s"
    "\030\037 \002(\001\022\026\n\016rootzone_depth\030  \002(\001\022\032\n\022litter"
    "_rain_stored\030! \002(\001\022\020\n\010litter_s\030\" \002(\001\022\014\n\004"
    "area\030# \002(\001\022\013\n\003pet\030$ \002(\001\022\013\n\003lai\030% \002(\001\022\020\n\010"
    "baseflow\030& \002(\001\022\022\n\nstreamflow\030\' \002(\001\022\016\n\006pr"
    "ecip\030( \002(\001\022\020\n\010recharge\030) \002(\001", 828);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "patch.proto", &protobuf_RegisterTypes);
  OutputPatch::default_instance_ = new OutputPatch();
  OutputPatch::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_patch_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_patch_2eproto {
  StaticDescriptorInitializer_patch_2eproto() {
    protobuf_AddDesc_patch_2eproto();
  }
} static_descriptor_initializer_patch_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int OutputPatch::kDayFieldNumber;
const int OutputPatch::kMonthFieldNumber;
const int OutputPatch::kYearFieldNumber;
const int OutputPatch::kBasinIdFieldNumber;
const int OutputPatch::kHillIdFieldNumber;
const int OutputPatch::kZoneIdFieldNumber;
const int OutputPatch::kPatchIdFieldNumber;
const int OutputPatch::kRainThroughfallFieldNumber;
const int OutputPatch::kDetentionStoreFieldNumber;
const int OutputPatch::kSatDeficitZFieldNumber;
const int OutputPatch::kSatDeficitFieldNumber;
const int OutputPatch::kRzStorageFieldNumber;
const int OutputPatch::kPotentialSatFieldNumber;
const int OutputPatch::kFieldCapacityFieldNumber;
const int OutputPatch::kWiltingPointFieldNumber;
const int OutputPatch::kUnsatStorageFieldNumber;
const int OutputPatch::kRzDrainageFieldNumber;
const int OutputPatch::kUnsatDrainageFieldNumber;
const int OutputPatch::kSublimationFieldNumber;
const int OutputPatch::kReturnFlowFieldNumber;
const int OutputPatch::kEvaporationFieldNumber;
const int OutputPatch::kEvaporationSurfFieldNumber;
const int OutputPatch::kSoilEvapFieldNumber;
const int OutputPatch::kSnowFieldNumber;
const int OutputPatch::kSnowMeltFieldNumber;
const int OutputPatch::kTransSatFieldNumber;
const int OutputPatch::kTransUnsatFieldNumber;
const int OutputPatch::kQInFieldNumber;
const int OutputPatch::kQOutFieldNumber;
const int OutputPatch::kPsnFieldNumber;
const int OutputPatch::kRootzoneSFieldNumber;
const int OutputPatch::kRootzoneDepthFieldNumber;
const int OutputPatch::kLitterRainStoredFieldNumber;
const int OutputPatch::kLitterSFieldNumber;
const int OutputPatch::kAreaFieldNumber;
const int OutputPatch::kPetFieldNumber;
const int OutputPatch::kLaiFieldNumber;
const int OutputPatch::kBaseflowFieldNumber;
const int OutputPatch::kStreamflowFieldNumber;
const int OutputPatch::kPrecipFieldNumber;
const int OutputPatch::kRechargeFieldNumber;
#endif  // !_MSC_VER

OutputPatch::OutputPatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rhessys.OutputPatch)
}

void OutputPatch::InitAsDefaultInstance() {
}

OutputPatch::OutputPatch(const OutputPatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rhessys.OutputPatch)
}

void OutputPatch::SharedCtor() {
  _cached_size_ = 0;
  day_ = GOOGLE_LONGLONG(0);
  month_ = GOOGLE_LONGLONG(0);
  year_ = GOOGLE_LONGLONG(0);
  basin_id_ = 0;
  hill_id_ = 0;
  zone_id_ = 0;
  patch_id_ = 0;
  rain_throughfall_ = 0;
  detention_store_ = 0;
  sat_deficit_z_ = 0;
  sat_deficit_ = 0;
  rz_storage_ = 0;
  potential_sat_ = 0;
  field_capacity_ = 0;
  wilting_point_ = 0;
  unsat_storage_ = 0;
  rz_drainage_ = 0;
  unsat_drainage_ = 0;
  sublimation_ = 0;
  return_flow_ = 0;
  evaporation_ = 0;
  evaporation_surf_ = 0;
  soil_evap_ = 0;
  snow_ = 0;
  snow_melt_ = 0;
  trans_sat_ = 0;
  trans_unsat_ = 0;
  q_in_ = 0;
  q_out_ = 0;
  psn_ = 0;
  rootzone_s_ = 0;
  rootzone_depth_ = 0;
  litter_rain_stored_ = 0;
  litter_s_ = 0;
  area_ = 0;
  pet_ = 0;
  lai_ = 0;
  baseflow_ = 0;
  streamflow_ = 0;
  precip_ = 0;
  recharge_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OutputPatch::~OutputPatch() {
  // @@protoc_insertion_point(destructor:rhessys.OutputPatch)
  SharedDtor();
}

void OutputPatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OutputPatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutputPatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutputPatch_descriptor_;
}

const OutputPatch& OutputPatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_patch_2eproto();
  return *default_instance_;
}

OutputPatch* OutputPatch::default_instance_ = NULL;

OutputPatch* OutputPatch::New() const {
  return new OutputPatch;
}

void OutputPatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OutputPatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(day_, rain_throughfall_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(detention_store_, unsat_storage_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(rz_drainage_, snow_);
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(snow_melt_, rootzone_depth_);
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(litter_rain_stored_, precip_);
  }
  recharge_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OutputPatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rhessys.OutputPatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 day = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_month;
        break;
      }

      // required int64 month = 2;
      case 2: {
        if (tag == 16) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_year;
        break;
      }

      // required int64 year = 3;
      case 3: {
        if (tag == 24) {
         parse_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_basin_id;
        break;
      }

      // required int32 basin_id = 4;
      case 4: {
        if (tag == 32) {
         parse_basin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basin_id_)));
          set_has_basin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hill_id;
        break;
      }

      // required int32 hill_id = 5;
      case 5: {
        if (tag == 40) {
         parse_hill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hill_id_)));
          set_has_hill_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_zone_id;
        break;
      }

      // required int32 zone_id = 6;
      case 6: {
        if (tag == 48) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_patch_id;
        break;
      }

      // required int32 patch_id = 7;
      case 7: {
        if (tag == 56) {
         parse_patch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patch_id_)));
          set_has_patch_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_rain_throughfall;
        break;
      }

      // required double rain_throughfall = 8;
      case 8: {
        if (tag == 65) {
         parse_rain_throughfall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rain_throughfall_)));
          set_has_rain_throughfall();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_detention_store;
        break;
      }

      // required double detention_store = 9;
      case 9: {
        if (tag == 73) {
         parse_detention_store:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &detention_store_)));
          set_has_detention_store();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_sat_deficit_z;
        break;
      }

      // required double sat_deficit_z = 10;
      case 10: {
        if (tag == 81) {
         parse_sat_deficit_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sat_deficit_z_)));
          set_has_sat_deficit_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_sat_deficit;
        break;
      }

      // required double sat_deficit = 11;
      case 11: {
        if (tag == 89) {
         parse_sat_deficit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sat_deficit_)));
          set_has_sat_deficit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_rz_storage;
        break;
      }

      // required double rz_storage = 12;
      case 12: {
        if (tag == 97) {
         parse_rz_storage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rz_storage_)));
          set_has_rz_storage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_potential_sat;
        break;
      }

      // required double potential_sat = 13;
      case 13: {
        if (tag == 105) {
         parse_potential_sat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &potential_sat_)));
          set_has_potential_sat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_field_capacity;
        break;
      }

      // required double field_capacity = 14;
      case 14: {
        if (tag == 113) {
         parse_field_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_capacity_)));
          set_has_field_capacity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_wilting_point;
        break;
      }

      // required double wilting_point = 15;
      case 15: {
        if (tag == 121) {
         parse_wilting_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wilting_point_)));
          set_has_wilting_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_unsat_storage;
        break;
      }

      // required double unsat_storage = 16;
      case 16: {
        if (tag == 129) {
         parse_unsat_storage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unsat_storage_)));
          set_has_unsat_storage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_rz_drainage;
        break;
      }

      // required double rz_drainage = 17;
      case 17: {
        if (tag == 137) {
         parse_rz_drainage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rz_drainage_)));
          set_has_rz_drainage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_unsat_drainage;
        break;
      }

      // required double unsat_drainage = 18;
      case 18: {
        if (tag == 145) {
         parse_unsat_drainage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unsat_drainage_)));
          set_has_unsat_drainage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_sublimation;
        break;
      }

      // required double sublimation = 19;
      case 19: {
        if (tag == 153) {
         parse_sublimation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sublimation_)));
          set_has_sublimation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_return_flow;
        break;
      }

      // required double return_flow = 20;
      case 20: {
        if (tag == 161) {
         parse_return_flow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &return_flow_)));
          set_has_return_flow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_evaporation;
        break;
      }

      // required double evaporation = 21;
      case 21: {
        if (tag == 169) {
         parse_evaporation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &evaporation_)));
          set_has_evaporation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_evaporation_surf;
        break;
      }

      // required double evaporation_surf = 22;
      case 22: {
        if (tag == 177) {
         parse_evaporation_surf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &evaporation_surf_)));
          set_has_evaporation_surf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_soil_evap;
        break;
      }

      // required double soil_evap = 23;
      case 23: {
        if (tag == 185) {
         parse_soil_evap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &soil_evap_)));
          set_has_soil_evap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_snow;
        break;
      }

      // required double snow = 24;
      case 24: {
        if (tag == 193) {
         parse_snow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &snow_)));
          set_has_snow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_snow_melt;
        break;
      }

      // required double snow_melt = 25;
      case 25: {
        if (tag == 201) {
         parse_snow_melt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &snow_melt_)));
          set_has_snow_melt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_trans_sat;
        break;
      }

      // required double trans_sat = 26;
      case 26: {
        if (tag == 209) {
         parse_trans_sat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trans_sat_)));
          set_has_trans_sat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_trans_unsat;
        break;
      }

      // required double trans_unsat = 27;
      case 27: {
        if (tag == 217) {
         parse_trans_unsat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trans_unsat_)));
          set_has_trans_unsat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(225)) goto parse_q_in;
        break;
      }

      // required double q_in = 28;
      case 28: {
        if (tag == 225) {
         parse_q_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &q_in_)));
          set_has_q_in();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(233)) goto parse_q_out;
        break;
      }

      // required double q_out = 29;
      case 29: {
        if (tag == 233) {
         parse_q_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &q_out_)));
          set_has_q_out();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_psn;
        break;
      }

      // required double psn = 30;
      case 30: {
        if (tag == 241) {
         parse_psn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &psn_)));
          set_has_psn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(249)) goto parse_rootzone_s;
        break;
      }

      // required double rootzone_s = 31;
      case 31: {
        if (tag == 249) {
         parse_rootzone_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rootzone_s_)));
          set_has_rootzone_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(257)) goto parse_rootzone_depth;
        break;
      }

      // required double rootzone_depth = 32;
      case 32: {
        if (tag == 257) {
         parse_rootzone_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rootzone_depth_)));
          set_has_rootzone_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(265)) goto parse_litter_rain_stored;
        break;
      }

      // required double litter_rain_stored = 33;
      case 33: {
        if (tag == 265) {
         parse_litter_rain_stored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &litter_rain_stored_)));
          set_has_litter_rain_stored();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(273)) goto parse_litter_s;
        break;
      }

      // required double litter_s = 34;
      case 34: {
        if (tag == 273) {
         parse_litter_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &litter_s_)));
          set_has_litter_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(281)) goto parse_area;
        break;
      }

      // required double area = 35;
      case 35: {
        if (tag == 281) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &area_)));
          set_has_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(289)) goto parse_pet;
        break;
      }

      // required double pet = 36;
      case 36: {
        if (tag == 289) {
         parse_pet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pet_)));
          set_has_pet();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(297)) goto parse_lai;
        break;
      }

      // required double lai = 37;
      case 37: {
        if (tag == 297) {
         parse_lai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lai_)));
          set_has_lai();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(305)) goto parse_baseflow;
        break;
      }

      // required double baseflow = 38;
      case 38: {
        if (tag == 305) {
         parse_baseflow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &baseflow_)));
          set_has_baseflow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(313)) goto parse_streamflow;
        break;
      }

      // required double streamflow = 39;
      case 39: {
        if (tag == 313) {
         parse_streamflow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &streamflow_)));
          set_has_streamflow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(321)) goto parse_precip;
        break;
      }

      // required double precip = 40;
      case 40: {
        if (tag == 321) {
         parse_precip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precip_)));
          set_has_precip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(329)) goto parse_recharge;
        break;
      }

      // required double recharge = 41;
      case 41: {
        if (tag == 329) {
         parse_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &recharge_)));
          set_has_recharge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rhessys.OutputPatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rhessys.OutputPatch)
  return false;
#undef DO_
}

void OutputPatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rhessys.OutputPatch)
  // required int64 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->day(), output);
  }

  // required int64 month = 2;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->month(), output);
  }

  // required int64 year = 3;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->year(), output);
  }

  // required int32 basin_id = 4;
  if (has_basin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->basin_id(), output);
  }

  // required int32 hill_id = 5;
  if (has_hill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hill_id(), output);
  }

  // required int32 zone_id = 6;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->zone_id(), output);
  }

  // required int32 patch_id = 7;
  if (has_patch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->patch_id(), output);
  }

  // required double rain_throughfall = 8;
  if (has_rain_throughfall()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->rain_throughfall(), output);
  }

  // required double detention_store = 9;
  if (has_detention_store()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->detention_store(), output);
  }

  // required double sat_deficit_z = 10;
  if (has_sat_deficit_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->sat_deficit_z(), output);
  }

  // required double sat_deficit = 11;
  if (has_sat_deficit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->sat_deficit(), output);
  }

  // required double rz_storage = 12;
  if (has_rz_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->rz_storage(), output);
  }

  // required double potential_sat = 13;
  if (has_potential_sat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->potential_sat(), output);
  }

  // required double field_capacity = 14;
  if (has_field_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->field_capacity(), output);
  }

  // required double wilting_point = 15;
  if (has_wilting_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->wilting_point(), output);
  }

  // required double unsat_storage = 16;
  if (has_unsat_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->unsat_storage(), output);
  }

  // required double rz_drainage = 17;
  if (has_rz_drainage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->rz_drainage(), output);
  }

  // required double unsat_drainage = 18;
  if (has_unsat_drainage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->unsat_drainage(), output);
  }

  // required double sublimation = 19;
  if (has_sublimation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->sublimation(), output);
  }

  // required double return_flow = 20;
  if (has_return_flow()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->return_flow(), output);
  }

  // required double evaporation = 21;
  if (has_evaporation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->evaporation(), output);
  }

  // required double evaporation_surf = 22;
  if (has_evaporation_surf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->evaporation_surf(), output);
  }

  // required double soil_evap = 23;
  if (has_soil_evap()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->soil_evap(), output);
  }

  // required double snow = 24;
  if (has_snow()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->snow(), output);
  }

  // required double snow_melt = 25;
  if (has_snow_melt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->snow_melt(), output);
  }

  // required double trans_sat = 26;
  if (has_trans_sat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->trans_sat(), output);
  }

  // required double trans_unsat = 27;
  if (has_trans_unsat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->trans_unsat(), output);
  }

  // required double q_in = 28;
  if (has_q_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->q_in(), output);
  }

  // required double q_out = 29;
  if (has_q_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->q_out(), output);
  }

  // required double psn = 30;
  if (has_psn()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->psn(), output);
  }

  // required double rootzone_s = 31;
  if (has_rootzone_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->rootzone_s(), output);
  }

  // required double rootzone_depth = 32;
  if (has_rootzone_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->rootzone_depth(), output);
  }

  // required double litter_rain_stored = 33;
  if (has_litter_rain_stored()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->litter_rain_stored(), output);
  }

  // required double litter_s = 34;
  if (has_litter_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->litter_s(), output);
  }

  // required double area = 35;
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->area(), output);
  }

  // required double pet = 36;
  if (has_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->pet(), output);
  }

  // required double lai = 37;
  if (has_lai()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->lai(), output);
  }

  // required double baseflow = 38;
  if (has_baseflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(38, this->baseflow(), output);
  }

  // required double streamflow = 39;
  if (has_streamflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->streamflow(), output);
  }

  // required double precip = 40;
  if (has_precip()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->precip(), output);
  }

  // required double recharge = 41;
  if (has_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->recharge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rhessys.OutputPatch)
}

::google::protobuf::uint8* OutputPatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rhessys.OutputPatch)
  // required int64 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->day(), target);
  }

  // required int64 month = 2;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->month(), target);
  }

  // required int64 year = 3;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->year(), target);
  }

  // required int32 basin_id = 4;
  if (has_basin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->basin_id(), target);
  }

  // required int32 hill_id = 5;
  if (has_hill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hill_id(), target);
  }

  // required int32 zone_id = 6;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->zone_id(), target);
  }

  // required int32 patch_id = 7;
  if (has_patch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->patch_id(), target);
  }

  // required double rain_throughfall = 8;
  if (has_rain_throughfall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->rain_throughfall(), target);
  }

  // required double detention_store = 9;
  if (has_detention_store()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->detention_store(), target);
  }

  // required double sat_deficit_z = 10;
  if (has_sat_deficit_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->sat_deficit_z(), target);
  }

  // required double sat_deficit = 11;
  if (has_sat_deficit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->sat_deficit(), target);
  }

  // required double rz_storage = 12;
  if (has_rz_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->rz_storage(), target);
  }

  // required double potential_sat = 13;
  if (has_potential_sat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->potential_sat(), target);
  }

  // required double field_capacity = 14;
  if (has_field_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->field_capacity(), target);
  }

  // required double wilting_point = 15;
  if (has_wilting_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->wilting_point(), target);
  }

  // required double unsat_storage = 16;
  if (has_unsat_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->unsat_storage(), target);
  }

  // required double rz_drainage = 17;
  if (has_rz_drainage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->rz_drainage(), target);
  }

  // required double unsat_drainage = 18;
  if (has_unsat_drainage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->unsat_drainage(), target);
  }

  // required double sublimation = 19;
  if (has_sublimation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->sublimation(), target);
  }

  // required double return_flow = 20;
  if (has_return_flow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->return_flow(), target);
  }

  // required double evaporation = 21;
  if (has_evaporation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->evaporation(), target);
  }

  // required double evaporation_surf = 22;
  if (has_evaporation_surf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->evaporation_surf(), target);
  }

  // required double soil_evap = 23;
  if (has_soil_evap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->soil_evap(), target);
  }

  // required double snow = 24;
  if (has_snow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->snow(), target);
  }

  // required double snow_melt = 25;
  if (has_snow_melt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->snow_melt(), target);
  }

  // required double trans_sat = 26;
  if (has_trans_sat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->trans_sat(), target);
  }

  // required double trans_unsat = 27;
  if (has_trans_unsat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->trans_unsat(), target);
  }

  // required double q_in = 28;
  if (has_q_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->q_in(), target);
  }

  // required double q_out = 29;
  if (has_q_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->q_out(), target);
  }

  // required double psn = 30;
  if (has_psn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->psn(), target);
  }

  // required double rootzone_s = 31;
  if (has_rootzone_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->rootzone_s(), target);
  }

  // required double rootzone_depth = 32;
  if (has_rootzone_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->rootzone_depth(), target);
  }

  // required double litter_rain_stored = 33;
  if (has_litter_rain_stored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->litter_rain_stored(), target);
  }

  // required double litter_s = 34;
  if (has_litter_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->litter_s(), target);
  }

  // required double area = 35;
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->area(), target);
  }

  // required double pet = 36;
  if (has_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->pet(), target);
  }

  // required double lai = 37;
  if (has_lai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->lai(), target);
  }

  // required double baseflow = 38;
  if (has_baseflow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(38, this->baseflow(), target);
  }

  // required double streamflow = 39;
  if (has_streamflow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->streamflow(), target);
  }

  // required double precip = 40;
  if (has_precip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->precip(), target);
  }

  // required double recharge = 41;
  if (has_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->recharge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rhessys.OutputPatch)
  return target;
}

int OutputPatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->day());
    }

    // required int64 month = 2;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->month());
    }

    // required int64 year = 3;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->year());
    }

    // required int32 basin_id = 4;
    if (has_basin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basin_id());
    }

    // required int32 hill_id = 5;
    if (has_hill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hill_id());
    }

    // required int32 zone_id = 6;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zone_id());
    }

    // required int32 patch_id = 7;
    if (has_patch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->patch_id());
    }

    // required double rain_throughfall = 8;
    if (has_rain_throughfall()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double detention_store = 9;
    if (has_detention_store()) {
      total_size += 1 + 8;
    }

    // required double sat_deficit_z = 10;
    if (has_sat_deficit_z()) {
      total_size += 1 + 8;
    }

    // required double sat_deficit = 11;
    if (has_sat_deficit()) {
      total_size += 1 + 8;
    }

    // required double rz_storage = 12;
    if (has_rz_storage()) {
      total_size += 1 + 8;
    }

    // required double potential_sat = 13;
    if (has_potential_sat()) {
      total_size += 1 + 8;
    }

    // required double field_capacity = 14;
    if (has_field_capacity()) {
      total_size += 1 + 8;
    }

    // required double wilting_point = 15;
    if (has_wilting_point()) {
      total_size += 1 + 8;
    }

    // required double unsat_storage = 16;
    if (has_unsat_storage()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double rz_drainage = 17;
    if (has_rz_drainage()) {
      total_size += 2 + 8;
    }

    // required double unsat_drainage = 18;
    if (has_unsat_drainage()) {
      total_size += 2 + 8;
    }

    // required double sublimation = 19;
    if (has_sublimation()) {
      total_size += 2 + 8;
    }

    // required double return_flow = 20;
    if (has_return_flow()) {
      total_size += 2 + 8;
    }

    // required double evaporation = 21;
    if (has_evaporation()) {
      total_size += 2 + 8;
    }

    // required double evaporation_surf = 22;
    if (has_evaporation_surf()) {
      total_size += 2 + 8;
    }

    // required double soil_evap = 23;
    if (has_soil_evap()) {
      total_size += 2 + 8;
    }

    // required double snow = 24;
    if (has_snow()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double snow_melt = 25;
    if (has_snow_melt()) {
      total_size += 2 + 8;
    }

    // required double trans_sat = 26;
    if (has_trans_sat()) {
      total_size += 2 + 8;
    }

    // required double trans_unsat = 27;
    if (has_trans_unsat()) {
      total_size += 2 + 8;
    }

    // required double q_in = 28;
    if (has_q_in()) {
      total_size += 2 + 8;
    }

    // required double q_out = 29;
    if (has_q_out()) {
      total_size += 2 + 8;
    }

    // required double psn = 30;
    if (has_psn()) {
      total_size += 2 + 8;
    }

    // required double rootzone_s = 31;
    if (has_rootzone_s()) {
      total_size += 2 + 8;
    }

    // required double rootzone_depth = 32;
    if (has_rootzone_depth()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required double litter_rain_stored = 33;
    if (has_litter_rain_stored()) {
      total_size += 2 + 8;
    }

    // required double litter_s = 34;
    if (has_litter_s()) {
      total_size += 2 + 8;
    }

    // required double area = 35;
    if (has_area()) {
      total_size += 2 + 8;
    }

    // required double pet = 36;
    if (has_pet()) {
      total_size += 2 + 8;
    }

    // required double lai = 37;
    if (has_lai()) {
      total_size += 2 + 8;
    }

    // required double baseflow = 38;
    if (has_baseflow()) {
      total_size += 2 + 8;
    }

    // required double streamflow = 39;
    if (has_streamflow()) {
      total_size += 2 + 8;
    }

    // required double precip = 40;
    if (has_precip()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // required double recharge = 41;
    if (has_recharge()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutputPatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OutputPatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OutputPatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OutputPatch::MergeFrom(const OutputPatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_basin_id()) {
      set_basin_id(from.basin_id());
    }
    if (from.has_hill_id()) {
      set_hill_id(from.hill_id());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_patch_id()) {
      set_patch_id(from.patch_id());
    }
    if (from.has_rain_throughfall()) {
      set_rain_throughfall(from.rain_throughfall());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_detention_store()) {
      set_detention_store(from.detention_store());
    }
    if (from.has_sat_deficit_z()) {
      set_sat_deficit_z(from.sat_deficit_z());
    }
    if (from.has_sat_deficit()) {
      set_sat_deficit(from.sat_deficit());
    }
    if (from.has_rz_storage()) {
      set_rz_storage(from.rz_storage());
    }
    if (from.has_potential_sat()) {
      set_potential_sat(from.potential_sat());
    }
    if (from.has_field_capacity()) {
      set_field_capacity(from.field_capacity());
    }
    if (from.has_wilting_point()) {
      set_wilting_point(from.wilting_point());
    }
    if (from.has_unsat_storage()) {
      set_unsat_storage(from.unsat_storage());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_rz_drainage()) {
      set_rz_drainage(from.rz_drainage());
    }
    if (from.has_unsat_drainage()) {
      set_unsat_drainage(from.unsat_drainage());
    }
    if (from.has_sublimation()) {
      set_sublimation(from.sublimation());
    }
    if (from.has_return_flow()) {
      set_return_flow(from.return_flow());
    }
    if (from.has_evaporation()) {
      set_evaporation(from.evaporation());
    }
    if (from.has_evaporation_surf()) {
      set_evaporation_surf(from.evaporation_surf());
    }
    if (from.has_soil_evap()) {
      set_soil_evap(from.soil_evap());
    }
    if (from.has_snow()) {
      set_snow(from.snow());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_snow_melt()) {
      set_snow_melt(from.snow_melt());
    }
    if (from.has_trans_sat()) {
      set_trans_sat(from.trans_sat());
    }
    if (from.has_trans_unsat()) {
      set_trans_unsat(from.trans_unsat());
    }
    if (from.has_q_in()) {
      set_q_in(from.q_in());
    }
    if (from.has_q_out()) {
      set_q_out(from.q_out());
    }
    if (from.has_psn()) {
      set_psn(from.psn());
    }
    if (from.has_rootzone_s()) {
      set_rootzone_s(from.rootzone_s());
    }
    if (from.has_rootzone_depth()) {
      set_rootzone_depth(from.rootzone_depth());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_litter_rain_stored()) {
      set_litter_rain_stored(from.litter_rain_stored());
    }
    if (from.has_litter_s()) {
      set_litter_s(from.litter_s());
    }
    if (from.has_area()) {
      set_area(from.area());
    }
    if (from.has_pet()) {
      set_pet(from.pet());
    }
    if (from.has_lai()) {
      set_lai(from.lai());
    }
    if (from.has_baseflow()) {
      set_baseflow(from.baseflow());
    }
    if (from.has_streamflow()) {
      set_streamflow(from.streamflow());
    }
    if (from.has_precip()) {
      set_precip(from.precip());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_recharge()) {
      set_recharge(from.recharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OutputPatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputPatch::CopyFrom(const OutputPatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputPatch::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void OutputPatch::Swap(OutputPatch* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(month_, other->month_);
    std::swap(year_, other->year_);
    std::swap(basin_id_, other->basin_id_);
    std::swap(hill_id_, other->hill_id_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(patch_id_, other->patch_id_);
    std::swap(rain_throughfall_, other->rain_throughfall_);
    std::swap(detention_store_, other->detention_store_);
    std::swap(sat_deficit_z_, other->sat_deficit_z_);
    std::swap(sat_deficit_, other->sat_deficit_);
    std::swap(rz_storage_, other->rz_storage_);
    std::swap(potential_sat_, other->potential_sat_);
    std::swap(field_capacity_, other->field_capacity_);
    std::swap(wilting_point_, other->wilting_point_);
    std::swap(unsat_storage_, other->unsat_storage_);
    std::swap(rz_drainage_, other->rz_drainage_);
    std::swap(unsat_drainage_, other->unsat_drainage_);
    std::swap(sublimation_, other->sublimation_);
    std::swap(return_flow_, other->return_flow_);
    std::swap(evaporation_, other->evaporation_);
    std::swap(evaporation_surf_, other->evaporation_surf_);
    std::swap(soil_evap_, other->soil_evap_);
    std::swap(snow_, other->snow_);
    std::swap(snow_melt_, other->snow_melt_);
    std::swap(trans_sat_, other->trans_sat_);
    std::swap(trans_unsat_, other->trans_unsat_);
    std::swap(q_in_, other->q_in_);
    std::swap(q_out_, other->q_out_);
    std::swap(psn_, other->psn_);
    std::swap(rootzone_s_, other->rootzone_s_);
    std::swap(rootzone_depth_, other->rootzone_depth_);
    std::swap(litter_rain_stored_, other->litter_rain_stored_);
    std::swap(litter_s_, other->litter_s_);
    std::swap(area_, other->area_);
    std::swap(pet_, other->pet_);
    std::swap(lai_, other->lai_);
    std::swap(baseflow_, other->baseflow_);
    std::swap(streamflow_, other->streamflow_);
    std::swap(precip_, other->precip_);
    std::swap(recharge_, other->recharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OutputPatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OutputPatch_descriptor_;
  metadata.reflection = OutputPatch_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rhessys

// @@protoc_insertion_point(global_scope)
